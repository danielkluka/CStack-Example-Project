/** \file CStack.cpp
 *  \brief CStack class source
 *  \details File contains implementation of CStack support functions
 *  \authors Kluka, Majnus, Pesek, Prasek
 *  \version 2022
 *	\attention File CStack.cpp is in very early stage of development.
 *  $Id$
 */

#include <cstring>
#include "CStack.h"


bool CStack::CompareDeep(const CStack &aStack) const // : následující slovem public - tøída bude dìdit všechny prkvy z tøídy za public
	{
	int poletmp[2];
	auto tmp1 = 3;
	auto tmp2 = 3;
	auto tmp3 = 3;
	if(CStack::Actual() < aStack.Actual())
		 tmp1 = -1;

	else if(CStack::Actual() == aStack.Actual())
		 tmp1 = 0;

	else
		 tmp1 = 1;

	poletmp[0] = tmp1;

	//if(CStack::Top() < aStack.Top())
	//	tmp2 = -1;
	////else if(CStack::Top() == aStack.Top())
	////	tmp2 = 0;
	//else(CStack::Top() < aStack.Top())
	//{
	//	tmp2 = 1;
	//}


	//if(CStack::Bottom() < aStack.Bottom())
	//	tmp2 = -1;
	////else if(CStack::Bottom() == aStack.Bottom())
	////	tmp2 = 0;
	//else(CStack::Bottom() < aStack.Bottom())
	//	tmp2 = 1;

	return poletmp;
	}


int CStack::Compare(const CStack& aStack) const
{
	if (this->Actual() > aStack.Actual())
	{
		return 1;
	}
	else if (this->Actual() < aStack.Actual())
	{
		return -1;
	}
	else if (this->Actual() == aStack.Actual())
	{
		return 0;
	}
}

/*
CStack &CStack::operator++() const
	{
	return;
	// TODO: insert return statement here
	}
*/

/*
CStack CStack::operator+(const CStack& aStack) const
	{
	return;
	// TODO: insert return statement here
	}
*/

/*
CStack operator+(const CBlock& aBlock, const CStack& aStack)
	{
	return;
	// TODO: insert return statement here
	}
*/

/*
CStack& CStack::operator-() const
	{
	// TODO: insert return statement here
	}
*/

/*
CStack& CStack::operator+=(const CStack& aStack)
	{
	// TODO: insert return statement here
	}
*/

/*
CStack &CStack::operator-(const CStack &aStack) const
	{
	// TODO: insert return statement here
	}
*/

/*
CStack &CStack::operator+=(const CStack &aStack)
	{
	// TODO: insert return statement here
	}
*/

/*
CStack CStack::operator-(const CStack &aStack) const
	{
	return CStack();
	// TODO: insert return statement here
	}
*/

/*
CStack &CStack::operator+=(const CStack &aStack)
	{
	// TODO: insert return statement here
	}
*/

CStack& CStack::Push(const CBlock &aValue)
	{
	CBlock *node = new CBlock(aValue);

	node->SetValue(aValue.Value());
	node->SetNextItem(nullptr);
	node->SetPrevItem(this->iTop);

	this->iTop = node;

	node->SetPrevItem(nullptr);
	delete(node);

	return *this;
	}

//CStack CStack::Bottom()
//{
//	return *iBottom;
//}

/*
CStack& CStack::Pop()
	{
	return CStack();
	// TODO: insert return statement here
	}
*/

/*
CStack CStack::Top(CBlock* aTop)
	{
	return CStack();
	// TODO: insert return statement here
	}
*/

/*
CStack CStack::Dup(CStack* aStack)
	{
	return CStack();
	// TODO: insert return statement here
	}
*/