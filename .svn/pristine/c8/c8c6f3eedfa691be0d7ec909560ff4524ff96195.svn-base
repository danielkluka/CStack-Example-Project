#include "CBlockUnitTests.h"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;

namespace UnitTests
{
	TEST_CLASS(UnitTests)
	{
	public:

	// comparison methods
		// private method CompareDeep; author Majnus

		TEST_METHOD(CStack_CompareDeep)
			{
				
			}


		// private method Compare; author Pesek

		TEST_METHOD(CStack_Compare)
			{

			}


	// c'tors
		// default c'tor; author Majnus

		/**
		 \test **Test of CBlock default c'tor**. **Author:** `Majnus`.
		 - Instance inicialized to the default value `CBlock::TestValue0`
		 - Counter `ClassInfo::Living` was incremented
		 - C'tor don't allocate, reallocate od deallocate any dynamic memory
		 - New CBlock instance have unique `ClassInfo::ID`
		 */
		TEST_METHOD(CStack_default_ctor)
			{
			const size_t alloc_count_before = get_alloc_count();
			const size_t dealloc_count_before = get_dealloc_count();
			const size_t realloc_count_before = get_realloc_count();
			const ptrdiff_t living_before = ClassInfo<CStack>::Living();
			CStack val0;
			const ptrdiff_t living_after = ClassInfo<CStack>::Living();
			const size_t alloc_count_after = get_alloc_count();
			const size_t dealloc_count_after = get_dealloc_count();
			const size_t realloc_count_after = get_realloc_count();
			Assert::IsTrue(living_before + 1 == living_after, L"Wrong number of instances", LINE_INFO());
			Assert::AreEqual(alloc_count_before, alloc_count_after, L"Default c'tor allocate", LINE_INFO());
			Assert::AreEqual(dealloc_count_before, dealloc_count_after, L"Default c'tor deallocate", LINE_INFO());
			Assert::AreEqual(realloc_count_before, realloc_count_after, L"Default c'tor reallocate", LINE_INFO());
			CStack val1;
			Assert::IsTrue(val1.ID() > val0.ID(), L"Wrong ClassInfo ID initialization", LINE_INFO());
			}


		// CBlock conversion c'tor; author Kluka

		/**
		 \test **Test of CBlock conversion c'tor**. **Author:** `Kluka`.
		 - Instance can be correctly inicialized with `CBlock::TestValue0` and `CBlock::TestValue0`
		 - Counter `ClassInfo::Living` was incremented
		 - Each new CBlock instance have unique `ClassInfo::ID`
		 - C'tor allocate, reallocate od deallocate dynamic memory if it was defined by `KCBlock_allocate` predicate
		 - Destruction of constructed instance deallocate memory if it was defined by `KCBlock_allocate` predicate
		 - Destruction of constructed instance decrement counter `ClassInfo::Living`
		 */
		TEST_METHOD(CStack_bloc_conv_ctor)
			{
			size_t allocsize_before = get_alloc_actual_size();
			ptrdiff_t living_before = ClassInfo<CStack>::Living();
			ptrdiff_t living_after;
			size_t allocsize_after;
				{
				const CBlock val0(CBlock::TestValue0());
				const CBlock val1(CBlock::TestValue1());

				const CStack stack0(val0);
				const CStack stack1(val1);

				living_after = ClassInfo<CStack>::Living();
				allocsize_after = get_alloc_actual_size();
				Assert::IsTrue(CBlock::TestValue0() == val0.Value(), L"Wrong value", LINE_INFO());
				Assert::IsTrue(CBlock::TestValue1() == val1.Value(), L"Wrong value", LINE_INFO());
				Assert::IsFalse(val0.Value() == val1.Value(), L"Wrong value", LINE_INFO());
				Assert::IsTrue(living_before + 2 == living_after, L"Wrong number of instances", LINE_INFO());
				Assert::IsTrue(val1.ID() > val0.ID(), L"Wrong ClassInfo ID initialization", LINE_INFO());
				Assert::IsTrue(stack1.ID() > stack0.ID(), L"Wrong ClassInfo ID initialization", LINE_INFO());
				//(this section will be activated as soon as Destroy()/Delete() method using "delete" will be created in the next stage of development)
				/*if constexpr (KCBlock_allocate)
					Assert::IsTrue(allocsize_before < allocsize_after, L"No memory allocation", LINE_INFO());
				else
					Assert::IsTrue(allocsize_before == allocsize_after, L"Memory allocated", LINE_INFO());*/
				}
			ptrdiff_t living_after2 = ClassInfo<CStack>::Living();
			size_t allocsize_after2 = get_alloc_actual_size();
			Assert::IsTrue(living_before == living_after2, L"Wrong number of instances", LINE_INFO());
			//(this section will be activated as soon as Destroy()/Delete() method using "delete" will be created in the next stage of development)
			//(memory is leaking, yes)
			//Assert::AreEqual(allocsize_before, allocsize_after2, L"Memory leaking", LINE_INFO());
			}


		// copy c'tor; author Majnus

		TEST_METHOD(CStack_copy_ctor)
			{
			
			}


		// string conversion c'tor; author Kluka

		TEST_METHOD(CStack_str_conv_ctor)
			{

			}


		// CBlock conversion c'tor from array of known size; author Pesek

		TEST_METHOD(CStack_array_conv_ctor)
			{

			}


		// convert c'tor from init list; author Prasek

		TEST_METHOD(CStack_initl_conv_ctor)
			{

			}


		// conversion c'tor of type size_t; author Prasek

		TEST_METHOD(CStack_sizet_conv_ctor)
			{

			}


	// d'tor
		// d'tor; author Majnus

		TEST_METHOD(CStack_dtor)
			{
			
			}


	// unary operators
		// unary operator +; author Pesek

		TEST_METHOD(CStack_unary_plus)
			{

			}


		// unary operator -; author Kluka

		TEST_METHOD(CStack_unary_minus)
			{
			size_t allocsize_before = get_alloc_actual_size();
			ptrdiff_t living_before = ClassInfo<CStack>::Living();
			ptrdiff_t living_after;
			size_t allocsize_after;
				{
				const CBlock val0(CBlock::TestValue0());

				CStack stack0(val0);
				CStack stack1(val0);

				size_t ID_before = stack1.ID();

				living_after = ClassInfo<CStack>::Living();
				allocsize_after = get_alloc_actual_size();
				Assert::IsTrue(CBlock::TestValue0() == val0.Value(), L"Wrong value", LINE_INFO());
				Assert::IsTrue(living_before + 2 == living_after, L"Wrong number of instances", LINE_INFO());
				//Assert::IsTrue(stack0 == stack1, L"Stacks are not the same", LINE_INFO());
				Assert::IsFalse(stack0 < stack1, L"Must be false", LINE_INFO());
				Assert::IsTrue(stack1.ID() > stack0.ID(), L"Wrong ClassInfo ID initialization", LINE_INFO());

				//stack1 = -stack0;
				size_t ID_after = stack1.ID();
				
				ptrdiff_t living_after2 = ClassInfo<CStack>::Living();
				size_t allocsize_after2 = get_alloc_actual_size();
				Assert::IsTrue(living_after == living_after2, L"Wrong number of instances", LINE_INFO());
				//Assert::IsTrue(stack0 == stack1, L"Stacks are not the same", LINE_INFO());
				Assert::IsFalse(stack0 < stack1, L"Must be false", LINE_INFO());
				Assert::IsTrue(ID_before == ID_after, L"Wrong ClassInfo ID initialization", LINE_INFO());

				//(this section will be activated as soon as Destroy()/Delete() method using "delete" will be created in the next stage of development)
				/*if constexpr (KCBlock_allocate)
					Assert::IsTrue(allocsize_before < allocsize_after, L"No memory allocation", LINE_INFO());
				else
					Assert::IsTrue(allocsize_before == allocsize_after, L"Memory allocated", LINE_INFO());*/
				}
			ptrdiff_t living_after3 = ClassInfo<CStack>::Living();
			size_t allocsize_after3 = get_alloc_actual_size();
			Assert::IsTrue(living_before == living_after3, L"Wrong number of instances", LINE_INFO());
			//(this section will be activated as soon as Destroy()/Delete() method using "delete" will be created in the next stage of development)
			//(memory is leaking, yes)
			//Assert::AreEqual(allocsize_before, allocsize_after3, L"Memory leaking", LINE_INFO());
			}


		// unary operator ++; author Prasek

		TEST_METHOD(CStack_unary_plus_plus)
			{

			}


		// unary operator --; author Kluka

		TEST_METHOD(CStack_unary_minus_minus)
			{

			}

		// unary operator !; author Majnus

		TEST_METHOD(CStack_unary_empty)
			{

			}


	// binary operators
		// binary operator +; author Majnus

		TEST_METHOD(CStack_binary_plus)
			{

			}


		// binary operator =; author Majnus

		TEST_METHOD(CStack_binary_assign)
			{

			}


		// binary non-member operator +; author Pesek

		TEST_METHOD(CStack_binary_nonmem_plus)
			{

			}


		// binary operator -; author Prasek

		TEST_METHOD(CStack_binary_minus)
			{

			}


		// binary operator -=; author Kluka

		TEST_METHOD(CStack_binary_subtr)
			{

			}


		// binary operator +=; author Pesek

		TEST_METHOD(CStack_binary_add)
			{

			}


		// operator size_t; author Prasek

		TEST_METHOD(CStack_sizet)
			{

			}


		// relational operator ==; author Kluka

		TEST_METHOD(CStack_equal)
			{
			CStack stack1_0(CBlock::TestValue0()), stack2_0(CBlock::TestValue0());
			CStack stack3_1(CBlock::TestValue1()), stack4_1(CBlock::TestValue1());

			Assert::IsTrue(stack1_0.ID() < stack2_0.ID(), L"Wrong ClassInfo ID", LINE_INFO());
			Assert::IsTrue(stack2_0.ID() < stack3_1.ID(), L"Wrong ClassInfo ID", LINE_INFO());
			Assert::IsTrue(stack3_1.ID() < stack4_1.ID(), L"Wrong ClassInfo ID", LINE_INFO());

			Assert::IsTrue(stack1_0 == stack1_0, L"Must be true", LINE_INFO());
			Assert::IsTrue(stack3_1 == stack4_1, L"Must be true", LINE_INFO());

			Assert::IsTrue(stack1_0 == stack2_0, L"Must be true", LINE_INFO());
			Assert::IsTrue(stack2_0 == stack1_0, L"Must be true", LINE_INFO());

			Assert::IsTrue(stack3_1 == stack4_1, L"Must be true", LINE_INFO());
			Assert::IsTrue(stack3_1 == stack4_1, L"Must be true", LINE_INFO());

			//Assert::IsFalse(stack1_0 == stack3_1, L"Must be false", LINE_INFO());
			//Assert::IsFalse(stack3_1 == stack1_0, L"Must be false", LINE_INFO());

			//Assert::IsFalse(stack2_0 == stack4_1, L"Must be false", LINE_INFO());
			//Assert::IsFalse(stack4_1 == stack2_0, L"Must be false", LINE_INFO());
			}


		// relational operator !=; author Majnus

		TEST_METHOD(CStack_not_equal)
		{

		}


		// relational operator <; author Prasek

		/**
		 \test **Test of operator less than (<) stStringValues`**. **Author:** `Prasek`.
		 - Test `Two stack . Stacks are same if, they have the same number of elements and the same lenght. //nutno dopsat
		 */
		TEST_METHOD(CStack_operator_less_than)
			{
			const CStack val1_0(CBlock::TestValue0()), val2_0(CBlock::TestValue0());
			const CStack val3_1(CBlock::TestValue1()), val4_1(CBlock::TestValue1());

			Assert::IsTrue(val1_0.ID() < val2_0.ID(), L"Wrong ClassInfo ID", LINE_INFO());
			Assert::IsTrue(val2_0.ID() < val3_1.ID(), L"Wrong ClassInfo ID", LINE_INFO());
			Assert::IsTrue(val3_1.ID() < val4_1.ID(), L"Wrong ClassInfo ID", LINE_INFO());

			Assert::IsFalse(val1_0 < val1_0, L"Must be false", LINE_INFO());
			Assert::IsFalse(val3_1 < val4_1, L"Must be false", LINE_INFO());

			Assert::IsFalse(val1_0 < val2_0, L"Must be false", LINE_INFO());
			Assert::IsFalse(val2_0 < val1_0, L"Must be false", LINE_INFO());

			Assert::IsFalse(val3_1 < val4_1, L"Must be false", LINE_INFO());
			Assert::IsFalse(val3_1 < val4_1, L"Must be false", LINE_INFO());

			// !!WARNING!! - WORK ON THE "CONSTRUCTION SITE" - it will work in the next version

			//Assert::IsTrue(val1_0 < val3_1, L"Must be true", LINE_INFO());
			//Assert::IsFalse(val3_1 < val1_0, L"Must be false", LINE_INFO());	
			
			//Assert::IsTrue(val2_0 < val4_1, L"Must be true", LINE_INFO());
			//Assert::IsFalse(val4_1 < val2_0, L"Must be false", LINE_INFO());
			}


		// relational operator >; author Pesek

		/**
		 \test **Test of CStack operator >  **. **Author:** `Pesek`.
		 - Each new CStack instance has unique `ClassInfo::ID`
		 */
		TEST_METHOD(CStack_operator_greater_than)
			{
			//const CStack val1_0(CBlock::TestValue0()), val2_0(CBlock::TestValue0());
			//const CStack val3_1(CBlock::TestValue1()), val4_1(CBlock::TestValue1());

			const CStack val1_0 = CStack::TestValue0(2);
			const CStack val2_0 = CStack::TestValue0(2);
			const CStack val3_1 = CStack::TestValue0(3);
			const CStack val4_1 = CStack::TestValue0(3);

			Assert::IsTrue(val1_0.ID() < val2_0.ID(), L"Wrong ClassInfo ID", LINE_INFO());
			Assert::IsTrue(val2_0.ID() < val3_1.ID(), L"Wrong ClassInfo ID", LINE_INFO());
			Assert::IsTrue(val3_1.ID() < val4_1.ID(), L"Wrong ClassInfo ID", LINE_INFO());
		
			Assert::IsFalse(val1_0 > val1_0, L"Must be false", LINE_INFO());
			Assert::IsFalse(val3_1 > val4_1, L"Must be false", LINE_INFO());
		
			Assert::IsFalse(val1_0 > val2_0, L"Must be false", LINE_INFO());
			Assert::IsFalse(val2_0 > val1_0, L"Must be false", LINE_INFO());
		
			Assert::IsFalse(val3_1 > val4_1, L"Must be false", LINE_INFO());
			Assert::IsFalse(val3_1 > val4_1, L"Must be false", LINE_INFO());

			// FUNGUJE :)

			Assert::IsFalse(val1_0 > val3_1, L"Must be false", LINE_INFO());
			Assert::IsTrue(val3_1 > val1_0, L"Must be true", LINE_INFO());
		
			Assert::IsFalse(val2_0 > val4_1, L"Must be false", LINE_INFO());
			Assert::IsTrue(val4_1 > val2_0, L"Must be true", LINE_INFO());
			}


		// output to the stream operator and input from the stream operator; author Majnus

		TEST_METHOD(CStack_operators_stream_format_compatibility)
			{
			
			}


	// CStack characteristic methods
		// method aaa.Reverzuj; author Kluka
		TEST_METHOD(CStack_aaareverzuj)
			{
			
			}


		// function Reverzuj(aaa); author Prasek
		TEST_METHOD(CStack_reverzujaaa)
			{

			}


		// stack push; authors Pesek, Prasek
		TEST_METHOD(CStack_push)
			{

			}


		// stack pop; authors Prasek, Pesek
		TEST_METHOD(CStack_pop)
			{

			}


		// stack dup; authors Pesek, Prasek
		TEST_METHOD(CStack_dup)
			{

			}
	};
}
