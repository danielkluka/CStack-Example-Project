/** \file CStack.cpp
 *  \brief CStack class source
 *  \details File contains implementation of CStack support functions
 *  \authors Kluka, Majnus, Pesek, Prasek
 *  \version 2022
 *	\attention File CStack.cpp is in very early stage of development.
 *  $Id$
 */

#include <cstring>
#include "CStack.h"

// comparison methods
/*	Private method CompareDeep
 *	authors Majnus, Kluka
 */
bool CStack::CompareDeep(const CStack& aStack2) const // : následující slovem public - tøída bude dìdit všechny prkvy z tøídy za public
	{
	//poznamky - nemazat - diky
	//vytvorit delete v destroy metode, ktery bude mazat samostatne instance - destroy bude volana v destruktoru


	//Privátní metoda CompareDeep, která porovná zásobníky i podle hodnot CBlock (návratové hodnoty jako u Compare).
	//Výsledky získané voláním metod Compare a/nebo CompareDeep budou ke své èinnosti používat relaèní operátory zásobníku.
	//a vrátí hodnotu -1,0 nebo 1 (první je kratší, stejné, první je delší)

	size_t aStack1_Count = iCount;
	size_t aStack2_Count = aStack2.iCount;

	if ((aStack2_Count == 0) || (aStack1_Count == 0))
		return true;

	if (aStack1_Count < aStack2_Count)
		return false;
	if (aStack1_Count > aStack2_Count)
		return false;
	if (aStack1_Count == aStack2_Count)
		{

		CBlock* iCurrent_Stack1 = iTop;
		CBlock* iCurrent_Stack2 = aStack2.iTop; //aktualni prvek 2. zasobniku


		while (iCurrent_Stack1 != NULL)
			{
			if (iCurrent_Stack1->Value() < iCurrent_Stack2->Value())
				return false;

			if (iCurrent_Stack1->Value() > iCurrent_Stack2->Value()) // umi rozeznat <=>, je to dobreeee
				return false;

			if (iCurrent_Stack1->Value() == iCurrent_Stack2->Value())
				{
				iCurrent_Stack2 = static_cast<CBlock*>(iCurrent_Stack2->NextItem());
				iCurrent_Stack1 = static_cast<CBlock*>(iCurrent_Stack1->NextItem());
				}
			}
		}
		return true;
	}


/*	Private method Compare
 *	author Pesek
 */
int CStack::Compare(const CStack& aStack) const
	{
	if (this->Actual() > aStack.Actual())
		{
		return 1;
		}
	else if (this->Actual() < aStack.Actual())
		{
		return -1;
		}
	else if (this->Actual() == aStack.Actual())
		{
		return 0;
		}
	}

// c'tors
/*	Default c'tor
 *	author Majnus
 */
CStack::CStack(): iTop(nullptr), iBottom(nullptr),iCount(0)
{
	
}

/*	CBlock conversion c'tor
 *	author Kluka
 */
CStack::CStack(const CBlock& aBlock)
	{
	iTop = new CBlock(aBlock.Value(), nullptr, nullptr);
	iTop->SetPrevNext(iTop, iTop);
	iBottom = iTop;
	iCount = 1;
	}

/*	Copy c'tor
 *	author Majnus
 */
 //CStack(const CStack& aStack)

/*	String conversion c'tor
 *	author Kluka
 */
CStack::CStack(const char* aString) : iTop(nullptr), iBottom(nullptr), iCount(0)
	{
	std::stringstream ss;
	ss << aString;
	//ss >> *this; // chyba Martinov operator >>

	/*
	ss << "(";
	do
		{
		ss << aString;
		}
	while(aString != ")");
	ss >> *this;
	// potrebne operatory << a >>, inak hotovo.. a tiez cakam na Martina, aby som vedel, ako spravi stream*/
	}

/*	CBlock conversion c'tor from array of known size
 *	author Pesek
 */


/*	Convert c'tor from init list
 *	author Prasek
 */
CStack::CStack(std::initializer_list<CBlock> aInitList) : CStack(aInitList.size(), std::data(aInitList))
	{
	}

/*	Conversion c'tor of type size_t
 *	author Prasek
 */
CStack::CStack(const size_t aSize) : iTop(nullptr), iBottom(nullptr), iCount(0)
	{
	for(size_t i = 0; i < aSize; ++i)
		{
		this->Push(CBlock());
		++iCount;
		}
	}

// d'tor
/*	Destructor
 *	author Majnus
 */
 CStack::~CStack() noexcept(noexcept(std::declval<CBlockBase>().~CBlockBase()))
	{
	iTop = nullptr;
	iBottom = nullptr;
	--iCount;
	}

// InstanceInfo getters
/*	Actual getter
 *	author Majnus
 */
size_t CStack::Actual() const //iInstance living - pocet zijicich
	{
	return iInstanceInfo.Living(); //peak -> ptrdiff_t - zakladni funkce c++ vracejici pointer arithmetic and array indexing //pres classinfo? return ClassInfo<CStack>::Living();
	}

/*	ID getter
 *	author Majnus
 */
size_t CStack::ID() const
	{
	return iInstanceInfo.ID(); //taky peak
	}

/*	Total getter
 *	author Majnus
 */
size_t CStack::Total() const
	{
	return iInstanceInfo.Total(); //taky peak //taky class info?
	}

// setters/getters
/*	PocetPrvku getter
 *	author Kluka
 */
size_t CStack::PocetPrvku() const
	{
	return iCount;
	}

/*	Usage getter
 *	author Pesek
 */


// unary operators
/*	Unary Operator +
 *	author Pesek
 */


/*	Unary Operator -
 *	author Kluka
 */
CStack CStack::operator-() const
	{
	if (iCount == 0 || iTop == nullptr)
		return *this;

	CStack iStack(*this);
	return iStack.Reverzuj();
	}

/*	Unary Operator ++
 *	author Prasek
 */
CStack& CStack::operator++() 
	{
	return this->Push(CBlock());
	}

/*	Unary Operator --
 *	author Kluka
 */
CStack& CStack::operator--()
	{
	if (iCount == 0 || iTop == nullptr)
		return *this;

	return this->Pop();
	}

/*	Unary Operator !
 *	author Majnus
 */
bool CStack::operator!() const
	{
	if(iTop == NULL)
		{
		throw "prazdny_zasobnik!";
		//return true;
		}

	return false;
	}

// binary operators
/*	Binary Operator +
 *	author Majnus
 */
/*
CStack CStack::operator+(const CStack &aStack) const; //aStack - ten druhy - navrtat do cpp
	{
	std::initializer_list<CStack> tmp; //bruh -konzultace
	CStack tmp; //tmp typu CStack - matemìto - pøetìžování operátorù
	return tmp;
	TODO: insert return statement here
	}
*/

/*	Binary Operator =
 *	author Majnus
 */
//CStack CStack::&operator=(const CStack &aStack) const
//{
//	
//}

/*	Binary non-member Operator +
 *	author Pesek
 */
/*
CStack operator+(const CBlock& aBlock, const CStack& aStack)
	{
	return;
	// TODO: insert return statement here
	}
*/

/*	Binary Operator -
 *	author Prasek
 */
CStack CStack::operator-(const CStack& aStack) const
	{
	CStack tmp;
	return 1000; // aby sel kod spustit
	}


/*	Binary Operator -=
 *	author Kluka
 */
CStack& CStack::operator-=(const CStack& aStack)
	{
	const CBlock* iCurrent_Stack2= aStack.iTop;
	const CBlock* iCurrent_Stack = iTop;
	iCurrent_Stack2 = aStack.iTop;
	for (size_t i = 0; i <= iCount; ++i)
		{
		iCurrent_Stack2 = aStack.iTop;
		while (iCurrent_Stack2 != NULL)
			{
			if (iCurrent_Stack == iCurrent_Stack2) delete(iCurrent_Stack);
			iCurrent_Stack2 = static_cast<CBlock*>(iCurrent_Stack2->NextItem());
			}
		iCurrent_Stack = static_cast<CBlock*>(iCurrent_Stack->NextItem());
		}
	return *this;
	}

/*	Binary Operator +=
 *	author Pesek
 */
/*
CStack& CStack::operator+=(const CStack& aStack)
	{
	// TODO: insert return statement here
	}
*/

/*	Operator size_t
 *	author Prasek
 */
 CStack::operator size_t() const
	{
	return iCount;
	}

/*	Relational Operator ==
 *	author Kluka
 */
bool CStack::operator==(const CStack& aStack) const
	{
	return this->CompareDeep(aStack);
	}

#ifdef CBLOCK_THREE_WAY_COMPARISON
/*	Three-way comparison by Value Operator
 *	author Kluka
 */
std::strong_ordering CStack::operator<=>(const CStack& aStack) const
	{
	return iCount <=> aStack.iCount;
	}

#else
// relational operators
/*	Relational Operator !=
 *	author Majnus
 */
bool CStack::operator!=(const CStack& aStack) const
	{
	return CompareDeep(aStack);
	}

/*	Relational Operator <
 *	author Prasek
 */
bool CStack::operator<(const CStack& aStack) const
	{
	return CompareDeep(aStack);
	//return (iCount < aStack.iCount); 
	}

/*	Relational Operator >
 *	author Pesek
 */
bool CStack::operator>(const CStack& aStack) const
	{
	return CompareDeep(aStack);
	//return (iCount > aStack.iCount);
	}

#endif /* CBLOCK_THREE_WAY_COMPARISON */

/*	Output to the stream operator
 *	author Majnus
 */
std::ostream& operator<<(std::ostream& aOStream, const CBlock& aStack)
{
	return aOStream;
}

/*	Input from the stream operator
 *	author Majnus
 */
std::istream &operator>>(std::istream &aIStream, CBlock &aStack)
{
	return aIStream;
}

// CStack characteristic methods
/*	Method aaa.Reverzuj
 *	author Kluka
 */
CStack CStack::Reverzuj()
	{
	if (iCount == 0 || iTop == nullptr)
		return *this;

	CBlock* iHead = iTop;
	CBlock* iPrev = NULL, * iNext = NULL;
	while (iHead != NULL)
		{
		iNext = static_cast<CBlock*>(iHead->NextItem());
		iHead->SetNextItem(iPrev);
		iPrev = iHead;
		iHead = iNext;
		}

	iHead = iPrev;
	return *this;
	}

/*	Function Reverzuj(aaa)
 *	author Prasek
 */
CStack Reverzuj(CStack aValue)
	{
	CStack result = aValue;
	return result.Reverzuj();
	}

/*	Stack Push
 *	authors Pesek, Prasek
 */
CStack& CStack::Push(const CBlock &aValue)
	{
	// je jedno, co pushnete do zasobnika, ci true alebo false, vzdy je tam iba false..
	CBlock* node = new CBlock(aValue);

	node->SetValue(aValue.Value());
	node->SetNextItem(nullptr);
	node->SetPrevItem(this->iTop);

	this->iTop = node;

	node->SetPrevItem(nullptr);
	//delete(node);
	++iCount; //thank me later - Dano

	return *this;

	//(Danova verzia, ktora nesla.. )
	/*
	CBlock* old_node = this->iTop;
	CBlock* node = new CBlock(aValue);

	node->SetPrevItem(old_node);
	node->SetNextItem(node);
	node->SetValue(aValue.Value());

	this->iTop = node;

	++iCount; //thank me later - Dano

	return *this;*/
	}

/*	Stack Pop
 *	authors Prasek, Pesek
 */
CStack& CStack::Pop()
	{
	CBlock* temp = iTop;
	iTop = static_cast<CBlock*>(iTop->NextItem());

	delete(temp);

	--iCount; //thank me later - Dano - diky, S.
	return *this;
	}

/*	Stack Top
 *	authors Prasek, Pesek
 */
CStack CStack::Top() const
	{
	return *iTop;
	}

/*	Stack Bottom
 *	author Majnus
 */
CStack CStack::Bottom() const
{
	return *iBottom;
	}

/*	Stack Search
 *	authors Prasek, Pesek
 */
bool CStack::Search(const CBlock &aValue) const
	{
	const CBlock *iCurrent = iTop;

	while(iCurrent != NULL)
		{
		if(iCurrent == aValue.NextItem())
			return true;

		iCurrent = static_cast<CBlock *>(iTop->NextItem());
		}

	return false;
	}
	
/*	Stack Dup
 *	authors Pesek, Prasek
 */
CStack CStack::Dup(CStack* aStack)
	{
	CStack iStack(*this);
	aStack = &iStack;
	return *this; // dodelal jsem return, prosim zkontrolovat, idk jestli je to dobre - S. -> vyskúšajte v main.cpp - Dano
	}