#ifndef CBLOCK_TINTERVAL_H
#define CBLOCK_TINTERVAL_H
/** \file CBlock_TInterval.h
 *  \brief CBlock_TInterval class header
 *  \details File contain CBlock_TInterval::CBlock definition
 *  \authors Kluka, Pesek
 *  \version 2022
 *  $Id$
 */

#include <iostream>
#include <sstream>
#include <string>
#include <stdexcept>
#include <typeinfo>
#include <utility>		// Due to: std::declval<CBlockBase>

#include "ClassInfo.h"
#include "CBlockBase.h"
#include "check.h"

/** \brief Namespace for encapsulating of \c TInterval variant of CBlock class
 *  \details For selecting this variant of CBlock class uncomment \c using \c namespace section in the CBlock.h
 */
namespace CBlock_TInterval
	{
	using TType = long;						///< Defined \c long \c TType of Interval

	/** \brief Basic definition of enumeration type for searching location of element in TInterval.
	 */
	enum TLocation
	{
		ELess = -1, EWithin = 0, EGreater = 1
	};

	/** \brief TInterval class (\c TInterval variant)
	 *  \details Definition of TInterval class (\c TInterval variant). There are defined all common methods and attributes.
	 */
	class TInterval
	{
	public:
		TType ELeft;						///< Defined \c TType left boundary of Interval
		TType ERight;						///< Defined \c TType right boundary of Interval
	};

	/** \brief CBlock class (\c TInterval variant)
	 *  \details Definition of CBlock class (\c TInterval variant). There are defined all common methods and attributes.
	 */
	class CBlock: public CBlockBase
		{
		ClassInfo<CBlock> iInstanceInfo;	///< Instance of the class info for usage statistics
		TInterval iValue;						///< Encapsulated \c TType value
		
	public:
		// test funkcnosti premennych - tuto metodu vobec neberte vazne, iba som skusal, ci sa da pristupit ku vsetkym premennym :) 
		
		/*long SetInterval(TInterval jou)
		{
			jou.ELeft = &iValue;
			jou.ERight = &iValue;

			if((&iValue > jou.ELeft) && (&iValue < jou.ERight))
				return EWithin;

			if (jou.ELeft > jou.ERight)
			{
				TType* mou = jou.ERight;
				jou.ERight = jou.ELeft;
				jou.ELeft = mou;
			}
			return 0;
		}*/



		// c'tors
		/** \brief Default c'tor
		 *  \details default interval is as follows: <-1,1>
		 *  \author Pesek
		 */
		CBlock() : CBlockBase()
		{
			iValue.ELeft = -1;
			iValue.ERight = 1;
		}

		/** \brief Copy c'tor
		 *  \details Create new instance by copying only \p iValue parameter. Pointer attributes are initialised to the \c this value (CBlockBase definition).
		 *  \param[in]	aValue	Original instance for copying
		 *  \author Pesek
		 */
		CBlock(const CBlock& aValue) : CBlockBase(), iValue(aValue.Value())
		{
		}

		/** \brief Conversion c'tor
		 *  \details Value is set. Pointer attributes are initialised by given values or by default to the \c this value (CBlockBase definition).
		 *  \param[in]	aValue	New TInterval Value
		 *  \param[in]	aPrev	Connection with previous node (when needed)
		 *  \param[in]	aNext	Connection with next node (when needed)
		 *  \author Pesek
		 */
		explicit CBlock(const TInterval aValue, CBlock* aPrev = nullptr, CBlock* aNext = nullptr) : CBlockBase(aPrev, aNext), iValue(aValue)
		{
		}

		/** \brief Conversion c'tor from std::string
		 *  \details Create new instance of CStack. Pointer attributes are initialised by given values or by default to the \c this value (CBlockBase definition).
		 *  \param[in]	aString	std::string with long value
		 *  \param[in]	aPrev	Connection with previous node (when needed)
		 *  \param[in]	aNext	Connection with next node (when needed)
		 *  \author Kluka
		 */
		//explicit CBlock(const std::string& aString, CBlock* aPrev = nullptr, CBlock* aNext = nullptr) : CBlock(aString.c_str(), aPrev, aNext)
		//{		
		//}
		   

		/** \brief Conversion c'tor from plain C string (striped string)
		 *  \details Create new instance from Value in the string. Pointer attributes are initialised by given values or by default to the \c this value (CBlockBase definition).
		 *  \param[in]	aStr	Plain C string with long value
		 *  \param[in]	aPrev	Connection with previous node (when needed)
		 *  \param[in]	aNext	Connection with next node (when needed)
		 *  \author Kluka
		 */
		//explicit CBlock(const char* aStr, CBlock* aPrev = nullptr, CBlock* aNext = nullptr) : CBlockBase(aPrev, aNext), iValue(0)
		//{
		//	std::istringstream iss(aStr, std::istringstream::in); iss >> iValue;
		//}


		// d'tor



		// InstanceInfo getters



		// setter/getter

		/** \brief Value setter
		 *  \param[in]	aValue	New Value
		 *  \author Kluka
		 *  \attention Method generate \c std::range_error exception if parameters \p aValue is out of the \c enum \c class TInterval range.
		 */
		void SetValue(const TInterval aValue)
			{
			//iValue = CheckRangeWithException(static_cast<size_t>(aValue));
			}


		/** \brief Value getter
		 *  return iValue of interval
		 *  \author Pesek
		 */
		TInterval Value() const
		{
			return(iValue);
		}


		// operators

		/** \brief Assigment operator
		 *  \return CBlock instance with copied attribute Value.
		 *  \author Kluka
		 */
		CBlock &operator=(const CBlock &aValue)
			{
			SetValue(aValue.Value());
			return *this;
			}

		/** \brief Comparing by Value operator
		 *  \return Return \c bool result of comparation
		 *  \author Kluka
		 */
		bool operator==(const CBlock &aValue) const
			{
			//return iValue == aValue.Value();
			}

#ifdef CBLOCK_THREE_WAY_COMPARISON
			/** \brief Threeway comparison by Value operator
			 *  \return Return \c std::strong_ordering result of comparation
			 *  \author Kluka
			 */
			std::strong_ordering operator<=>(const CBlock &aValue) const
				{
				//return iValue <=> aValue.Value();
				}
#else
			/** \brief Comparing by Value operator
			 *  \return Return \c bool result of comparation
			 *  \author Kluka
			 */
			bool operator!=(const CBlock &aValue) const
				{
				return iValue != aValue.Value();
				}

			/** \brief Comparing by Value operator
			 *  \return Return \c bool result of comparation
			 *  \author Kluka
			 */
			bool operator<(const CBlock &aValue) const
				{
				return iValue < aValue.Value();
				}

			/** \brief Comparing by Value operator
			 *  \return Return \c bool result of comparation
			 *  \author Kluka
			 */
			bool operator>(const CBlock &aValue) const
				{
				return iValue > aValue.Value();
				}
#endif /* CBLOCK_THREE_WAY_COMPARISON */

			/** \brief Output to the stream operator. (\em serialization)
			 *  \param[in]	aOStream	Output stream
			 *  \param[in]	aValue	Serialized instantion of CBlock
			 *  \return Return \c std::ostream with serialized Value
			 *  \author Kluka
			 */
			friend std::ostream &operator<<(std::ostream &aOStream, const CBlock &aValue)
				{

				}

			/** \brief Input from the stream operator. (\em deserialization)
			 *  \param[in]	aIStream	Input stream
			 *  \param[out]	aValue	Place for deserialized instantion of CBlock
			 *  \return Return rest of \c std::istream
			 *  \author Kluka
			 */
			friend std::istream &operator>>(std::istream &aIStream, CBlock &aValue)
				{

				}

		};
	}

#endif /* __CBLOCK_TINTERVAL_H__ */
