#ifndef CSTACK_H
#define CSTACK_H
/** \file CStack.h
 *  \brief CStack class header
 *  \details File contain CStack class container definition.
 *  \authors Kluka, Majnus, Pesek, Prasek
 *  \version 0.0.1
 *  $Id$
 */

#include "CBlock.h"
#include <initializer_list>		// Due to: std::initializer_list<CBlock>
#include "check.h"

 /** \brief CStack class
  *  \details Definition of CStack class. There are defined all common methods and attributes.
  */
class CStack
	{
	
		CBlock *iTop; // Ukazatel na vrchol zásobníku
		size_t iCount;
		ClassInfo<CStack> iInstanceInfo; ///< Instance of the class info for usage statistics
		
		/** \ brief Private method CompareDeep
		 *  \details	dopisat
		 *  \param[in]	dopisat
		 *  \return		dopisat
		 *  \author Majnus
		 */
		bool CompareDeep(const CStack & aStack) const;

		/** \ brief Private method Compare
		 *  \details	dopisat
		 *  \param[in]	dopisat
		 *  \return		dopisat
		 *  \author Pesek
		 */
		int Compare(const CStack & aStack) const;


	public:

		// c'tors
		/** \brief Conversion c'tor from CBlock array
		 *  \details C'tor from the array of \c CBlock items
		 *  \authors Majnus
		 */
		CStack(size_t aSize, const CBlock *aItems)
			{
			}

		/** \brief Conversion c'tor from initializer list
		 *  \details C'tor from an initializer list of \c CBlock use delegation to the c'tor from array of CBlock items
		 *  \authors 
		 */
		CStack(std::initializer_list<CBlock> aInitList): CStack(aInitList.size(), std::data(aInitList))
			{//hotovo
			}

		/** \brief CBlock conversion c'tor
		 *  \details Create new instance with CBlock
		 *  \param[in]	dopisat	
		 *  \author Kluka
		 */
		CStack(const CBlock *aBlock)
			{
			/*iTop = new CStack(aBlock, nullptr, nullptr);
			iTop->SetPrevNext(iTop, iTop);
			iCount = 1;*/
			}

		/** \brief Default c'tor
		 *  \details Create new instance with CBlock
		 *  \param[in]	dopisat	
		 *  \author Majnus
		 */
		CStack(): iTop(nullptr), iCount(0)
			{
			}



		// d'tor



		// InstanceInfo getters
		/** \brief Actual getter
		 *  \return Number of actually living instances
		 *  \author Majnus
		 */
		size_t Actual()
			{
			return iInstanceInfo.Living(); //peak -> ptrdiff_t - zakladni funkce c++ vracejici pointer arithmetic and array indexing
			}

		/** \brief ID getter
		 *  \return Unique instance ID
		 *  \author Majnus
		 */
		size_t ID()
			{
			return iInstanceInfo.ID(); //taky peak
			}
		
		/** \brief Total getter
		 *  \return Number of totally created instances
		 *  \author Majnus
		 */
		size_t Total() 
			{
			return iInstanceInfo.Total(); //taky peak
			}



		// setter/getter



		// operators
		/** \brief Unary operator ++  
		 *  \details Inserts a new CBlock created by the default c'tor at the end of the stack
		 *  \author Prasek
		 */
		CStack &operator++() const; 
		//je treba dodelat defaultni konstrutktor
		// defaultny konstruktorje hotovy - Dano

		/** \brief Binary operator -
		 *  \details A new stack will be created that will contain all elements from the first stack that are not contained in the second stack and will not honor the order
		 *  \author Prasek
		 */
		CStack &operator-() const;
	
		
		/** \brief Operator size_t 
		 *  \details Converts the stack to size_t, which will represent the number of stack elements
		 *  \author Prasek
		 */
		explicit operator size_t () const
			{
			return (size_t)(iCount);
			}


////////////////////////// NEMAZAT, TOTO JE SPRAVNE A HOTOVE
/*#ifdef CBLOCK_THREE_WAY_COMPARISON
		/** \brief Threeway comparison by Value operator
		 *  \return Return \c std::strong_ordering result of comparation
		 *  \author Kluka
		 */
		//std::strong_ordering operator<=>(const CStack &aStack) const
		//	{
		//	return iCount <=> aStack.iCount;
		//	}
//#else
////////////////////////// NEMAZAT, TOTO JE SPRAVNE A HOTOVE


		/*
		 Zasobniky jsou stejne, kdyz maji stejny pocet prvku a maji stejnou velikost.
		 Ten zasobnik, ktery ma mene prvku je mensi. 
		 Kdyz maji stejny pocet prvku, tak neni zadny z nich mensi.
		*/

		/** \brief Operator <
		 *  \details Comparison of two stacks
		 *  \author Prasek
		 */
		bool operator<(const CStack &aStack) const
			{
			return (iCount < aStack.iCount);
			}


////////////////////////// NEMAZAT, TOTO JE SPRAVNE A HOTOVE
//#endif /* CBLOCK_THREE_WAY_COMPARISON */
////////////////////////// NEMAZAT, TOTO JE SPRAVNE A HOTOVE


		// CStack characteristic methods
		void Push(const CBlock &aValue);

	}; /* class CStack */



#endif /* CSTACK_H */
