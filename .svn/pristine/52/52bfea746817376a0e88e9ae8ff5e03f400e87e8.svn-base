/** \file CStack.cpp
 *  \brief CStack class source
 *  \details File contains implementation of CStack support functions
 *  \authors Kluka, Majnus, Pesek, Prasek
 *  \version 2022
 *	\attention File CStack.cpp is in very early stage of development.
 *  $Id$
 */

#include <cstring>
#include "CStack.h"

// comparison methods
	// private method CompareDeep; author Majnus
	bool CStack::CompareDeep(const CStack &aStack) const // : následující slovem public - tøída bude dìdit všechny prkvy z tøídy za public
		{
		int poletmp[2];
		auto tmp1 = 3;
		auto tmp2 = 3;
		auto tmp3 = 3;
		if(CStack::Actual() < aStack.Actual())
			 tmp1 = -1;

		else if(CStack::Actual() == aStack.Actual())
			 tmp1 = 0;

		else
			 tmp1 = 1;

		poletmp[0] = tmp1;

		//if(CStack::Top() < aStack.Top())
		//	tmp2 = -1;
		////else if(CStack::Top() == aStack.Top())
		////	tmp2 = 0;
		//else(CStack::Top() < aStack.Top())
		//{
		//	tmp2 = 1;
		//}


		//if(CStack::Bottom() < aStack.Bottom())
		//	tmp2 = -1;
		////else if(CStack::Bottom() == aStack.Bottom())
		////	tmp2 = 0;
		//else(CStack::Bottom() < aStack.Bottom())
		//	tmp2 = 1;

		return poletmp;
		}

	// private method Compare; author Pesek
	int CStack::Compare(const CStack& aStack) const
		{
		if (this->Actual() > aStack.Actual())
			{
			return 1;
			}
		else if (this->Actual() < aStack.Actual())
			{
			return -1;
			}
		else if (this->Actual() == aStack.Actual())
			{
			return 0;
			}
		}

// c'tors
	// default c'tor; author Majnus


	// CBlock conversion c'tor; author Kluka
	CStack::CStack(const CBlock& aBlock)
		{
		iTop = new CBlock(aBlock.Value(), nullptr, nullptr);
		iTop->SetPrevNext(iTop, iTop);
		iBottom = iTop;
		iCount = 1;
		}

	// copy c'tor; author Majnus


	// string conversion c'tor; author Kluka
	CStack::CStack(const char* aString) : iTop(nullptr), iBottom(nullptr), iCount(0)
		{
		std::stringstream ss;
		ss << aString;
		//ss >> *this; // chyba Martinov operator >>

		/*
		ss << "(";
		do
			{
			ss << aString;
			}
		while(aString != ")");
		ss >> *this;
		// potrebne operatory << a >>, inak hotovo.. a tiez cakam na Martina, aby som vedel, ako spravi stream*/
		}

	// CBlock conversion c'tor from array of known size; author Pesek


	// convert c'tor from init list; author Prasek


	// conversion c'tor of type size_t; author Prasek


// d'tor
	// d'tor; author Majnus


// InstanceInfo getters
	// Actual getter; author Majnus


	// ID getter; author Majnus


	// Total getter; author Majnus


// setters/getters
	// PocetPrvku getter; author Kluka
	size_t CStack::PocetPrvku() const
		{
		return iCount;
		}

	// Usage getter; author Pesek


// unary operators
	// unary operator +; author Pesek


	// unary operator -; author Kluka
	CStack CStack::operator-() const
		{
		if (iCount == 0 || iTop == nullptr)
			return *this;

		CStack iStack(*this);
		return iStack.Reverzuj();
		}

	/*
	// unary operator ++; author Prasek 
	CStack &CStack::operator++() const
		{
		return;
		// TODO: insert return statement here
		}
	*/

	// unary operator --; author Kluka
	CStack& CStack::operator--()
		{
		if (iCount == 0 || iTop == nullptr)
			return *this;

		return this->Pop();
		}

	// unary operator !; author Majnus

// binary operators
	/*
	// binary operator +; author Majnus
	CStack CStack::operator+(const CStack& aStack) const
		{
		return;
		// TODO: insert return statement here
		}
	*/

	// binary operator =; author Majnus


	/*
	// binary non-member operator +; author Pesek
	CStack operator+(const CBlock& aBlock, const CStack& aStack)
		{
		return;
		// TODO: insert return statement here
		}
	*/

	/*
	// binary operator -; author Prasek
	CStack& CStack::operator-(const CStack& aStack) const
		{
		// TODO: insert return statement here
		}
	*/

	// binary operator -=; author Kluka
	CStack& CStack::operator-=(const CStack& aStack)
		{
		const CBlock* iCurrent = aStack.iTop;
		for (size_t i = 0; i <= iCount; ++i)
			{
			iCurrent = aStack.iTop;
			while (iCurrent != NULL)
				{
				if (this->iTop == iCurrent) this->Pop();
				iCurrent = static_cast<CBlock*>(iCurrent->NextItem());
				}
			}
		return *this;
		}

	/*
	// binary operator +=; author Pesek
	CStack& CStack::operator+=(const CStack& aStack)
		{
		// TODO: insert return statement here
		}
	*/

	// operator size_t; author Prasek


#ifdef CBLOCK_THREE_WAY_COMPARISON
	// three-way comparison by Value operator; author Kluka
	std::strong_ordering CStack::operator<=>(const CStack& aStack) const
		{
		return iCount <=> aStack.iCount;
		}

#else
// relational operators
	// relational operator ==; author Kluka
	bool CStack::operator==(const CStack& aStack) const
		{
		return CompareDeep(aStack);
		}

	// relational operator !=; author Majnus
	bool CStack::operator!=(const CStack& aStack) const
		{
		return CompareDeep(aStack);
		}

	// relational operator <; author Prasek
	bool CStack::operator<(const CStack& aStack) const
		{
		return CompareDeep(aStack);
		//return (iCount < aStack.iCount); 
		}

	// relational operator >; author Pesek
	bool CStack::operator>(const CStack& aStack) const
		{
		return CompareDeep(aStack);
		//return (iCount > aStack.iCount);
		}

#endif /* CBLOCK_THREE_WAY_COMPARISON */

	// output to the stream operator; author Majnus


	// input from the stream operator; author Majnus


// CStack characteristic methods
	// method aaa.Reverzuj; author Kluka
	CStack CStack::Reverzuj()
		{
		if (iCount == 0 || iTop == nullptr)
			return *this;

		CBlock* iHead = iTop;
		CBlock* iPrev = NULL, * iNext = NULL;
		while (iHead != NULL)
			{
			iNext = static_cast<CBlock*>(iHead->NextItem());
			iHead->SetNextItem(iPrev);
			iPrev = iHead;
			iHead = iNext;
			}
		iHead = iPrev;
		return *this;
		}

	// function Reverzuj(aaa); author Prasek


	// stack push; authors Pesek, Prasek
	CStack& CStack::Push(const CBlock &aValue)
		{
		CBlock *node = new CBlock(aValue);

		node->SetValue(aValue.Value());
		node->SetNextItem(nullptr);
		node->SetPrevItem(this->iTop);

		this->iTop = node;

		node->SetPrevItem(nullptr);
		delete(node);

		return *this;
		}


	/*
	// stack pop; authors Prasek, Pesek
	CStack& CStack::Pop()
		{
		return CStack();
		// TODO: insert return statement here
		}
	*/

	/*
	// stack top; authors Prasek, Pesek
	CStack CStack::Top(CBlock* aTop)
		{
		return CStack();
		// TODO: insert return statement here
		}
	*/

	/*
	// stack bottom; author Majnus
	CStack CStack::Bottom()
		{
		return *iBottom;
		}
	*/

	// stack search; authors Prasek, Pesek


	/*
	// stack dup; authors Pesek, Prasek
	CStack CStack::Dup(CStack* aStack)
		{
		return CStack();
		// TODO: insert return statement here
		}
	*/