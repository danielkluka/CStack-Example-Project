/** \file CStack.cpp
 *  \brief CStack class source
 *  \details File contains implementation of CStack support functions
 *  \authors Kluka, Majnus, Pesek, Prasek
 *  \version 2022
 *	\attention File CStack.cpp is in very early stage of development.
 *  $Id$
 */

#include <cstring>
#include "CStack.h"

// comparison methods
/*	Private method CompareDeep
 *	author Majnus
 */
bool CStack::CompareDeep(const CStack &aStack) const // : následující slovem public - tøída bude dìdit všechny prkvy z tøídy za public
	{



	auto tmp1 = 3;
	auto tmp2 = 3;
	auto tmp3 = 3;

	auto tmpCStack = CStack::PocetPrvku();
	auto tmpaStack = aStack.PocetPrvku();

	size_t i;

	//if(tmpaStack || tmpCStack == 0)
	//	return 3;

	auto tmpvalue = CStack::iTop;


	if(this->Actual() > aStack.Actual())
		return tmp1 = 1;
		
	if(this->Actual() < aStack.Actual())
		return tmp1 = -1;
		
	if(this->Actual() == aStack.Actual())
		return tmp1 = 0;


	if(this->iTop > aStack.iTop)
		return tmp2 = 1;

	if(this->iTop < aStack.iTop)
		return tmp2 = -1;

	if(this->iTop == aStack.iTop)
		return tmp2= 0;


	if(this->iBottom > aStack.iBottom)
		return tmp3 = 1;

	if(this->iBottom < aStack.iBottom)
		return tmp3 = -1;

	if(this->iBottom == aStack.iBottom)
		return tmp3 = 0;


	int poletmp [3] = {tmp1, tmp2, tmp3};

	return poletmp;


	//if(tmpCStack == tmpaStack)
	//	{
	//	i = tmpaStack;

	//	for(auto j = 0; j < i; ++j)
	//		{
	//		auto tmpx = 1;

	//		if(CStack::Actual() != aStack.Actual())
	//			{

	//			tmpx = 0;

	//			goto konecnemohupouzitgotojelikozjsemtomelceloustrednizakazane;

	//			}

	//		}

	//	}

	//else if(tmpCStack > tmpaStack)
	//	tmp1 = 1;
	//else
	//	tmp1 = -1;


	//konecnemohupouzitgotojelikozjsemtomelceloustrednizakazane:


	//if(CStack::Actual() < aStack.Actual())
	//	 tmp1 = -1;

	//else if(CStack::Actual() == aStack.Actual())
	//	 tmp1 = 0;

	//else
	//	 tmp1 = 1;
	//poletmp[0] = tmp1;

	//if(CStack::Top() < aStack.Top())
	//	tmp2 = -1;
	////else if(CStack::Top() == aStack.Top())
	////	tmp2 = 0;
	//else(CStack::Top() < aStack.Top())
	//{
	//	tmp2 = 1;
	//}


	//if(CStack::Bottom() < aStack.Bottom())
	//	tmp2 = -1;
	////else if(CStack::Bottom() == aStack.Bottom())
	////	tmp2 = 0;
	//else(CStack::Bottom() < aStack.Bottom())
	//	tmp2 = 1;


	}

/*	Private method Compare
 *	author Pesek
 */
int CStack::Compare(const CStack& aStack) const
	{
	if (this->Actual() > aStack.Actual())
		{
		return 1;
		}
	else if (this->Actual() < aStack.Actual())
		{
		return -1;
		}
	else if (this->Actual() == aStack.Actual())
		{
		return 0;
		}
	}

// c'tors
/*	Default c'tor
 *	author Majnus
 */


/*	CBlock conversion c'tor
 *	author Kluka
 */
CStack::CStack(const CBlock& aBlock)
	{
	iTop = new CBlock(aBlock.Value(), nullptr, nullptr);
	iTop->SetPrevNext(iTop, iTop);
	iBottom = iTop;
	iCount = 1;
	}

/*	Copy c'tor
 *	author Majnus
 */


/*	String conversion c'tor
 *	author Kluka
 */
CStack::CStack(const char* aString) : iTop(nullptr), iBottom(nullptr), iCount(0)
	{
	std::stringstream ss;
	ss << aString;
	//ss >> *this; // chyba Martinov operator >>

	/*
	ss << "(";
	do
		{
		ss << aString;
		}
	while(aString != ")");
	ss >> *this;
	// potrebne operatory << a >>, inak hotovo.. a tiez cakam na Martina, aby som vedel, ako spravi stream*/
	}

/*	CBlock conversion c'tor from array of known size
 *	author Pesek
 */


/*	Convert c'tor from init list
 *	author Prasek
 */


/*	Conversion c'tor of type size_t
 *	author Prasek
 */
CStack::CStack(const size_t aSize) : iTop(nullptr), iBottom(nullptr), iCount(0)
	{
	for(size_t i = 0; i < aSize; ++i)
		{
		this->Push(CBlock());
		++iCount;
		}
	}

// d'tor
/*	Destructor
 *	author Majnus
 */


// InstanceInfo getters
/*	Actual getter
 *	author Majnus
 */


/*	ID getter
 *	author Majnus
 */


/*	Total getter
 *	author Majnus
 */


// setters/getters
/*	PocetPrvku getter
 *	author Kluka
 */
size_t CStack::PocetPrvku() const
	{
	return iCount;
	}

/*	Usage getter
 *	author Pesek
 */


// unary operators
/*	Unary Operator +
 *	author Pesek
 */


/*	Unary Operator -
 *	author Kluka
 */
CStack CStack::operator-() const
	{
	if (iCount == 0 || iTop == nullptr)
		return *this;

	CStack iStack(*this);
	return iStack.Reverzuj();
	}

/*	Unary Operator ++
 *	author Prasek
 */
CStack& CStack::operator++() 
	{
	return this->Push(CBlock());
	}

/*	Unary Operator --
 *	author Kluka
 */
CStack& CStack::operator--()
	{
	if (iCount == 0 || iTop == nullptr)
		return *this;

	return this->Pop();
	}

/*	Unary Operator !
 *	author Majnus
 */


// binary operators
/*	Binary Operator +
 *	author Majnus
 */
/*
CStack CStack::operator+(const CStack& aStack) const
	{
	return;
	// TODO: insert return statement here
	}
*/

/*	Binary Operator =
 *	author Majnus
 */


/*	Binary non-member Operator +
 *	author Pesek
 */
/*
CStack operator+(const CBlock& aBlock, const CStack& aStack)
	{
	return;
	// TODO: insert return statement here
	}
*/

/*	Binary Operator -
 *	author Prasek
 */

CStack CStack::operator-(const CStack& aStack) const
	{
	return 1000; // aby sel kod spustit
	}


/*	Binary Operator -=
 *	author Kluka
 */
CStack& CStack::operator-=(const CStack& aStack)
	{
	const CBlock* iCurrent = aStack.iTop;
	for (size_t i = 0; i <= iCount; ++i)
		{
		iCurrent = aStack.iTop;
		while (iCurrent != NULL)
			{
			if (this->iTop == iCurrent) this->Pop();
			iCurrent = static_cast<CBlock*>(iCurrent->NextItem());
			}
		}
	return *this;
	}

/*	Binary Operator +=
 *	author Pesek
 */
/*
CStack& CStack::operator+=(const CStack& aStack)
	{
	// TODO: insert return statement here
	}
*/

/*	Operator size_t
 *	author Prasek
 */
 CStack::operator size_t() const
	{
	return iCount;
	}


/*	Relational Operator ==
 *	author Kluka
 */
bool CStack::operator==(const CStack& aStack) const
	{
	return CompareDeep(aStack);
	}

#ifdef CBLOCK_THREE_WAY_COMPARISON
/*	Three-way comparison by Value Operator
 *	author Kluka
 */
std::strong_ordering CStack::operator<=>(const CStack& aStack) const
	{
	return iCount <=> aStack.iCount;
	}

#else
// relational operators
/*	Relational Operator !=
 *	author Majnus
 */
bool CStack::operator!=(const CStack& aStack) const
	{
	return CompareDeep(aStack);
	}

/*	Relational Operator <
 *	author Prasek
 */
bool CStack::operator<(const CStack& aStack) const
	{
	return CompareDeep(aStack);
	//return (iCount < aStack.iCount); 
	}

/*	Relational Operator >
 *	author Pesek
 */
bool CStack::operator>(const CStack& aStack) const
	{
	return CompareDeep(aStack);
	//return (iCount > aStack.iCount);
	}

#endif /* CBLOCK_THREE_WAY_COMPARISON */

/*	Output to the stream operator
 *	author Majnus
 */


/*	Input from the stream operator
 *	author Majnus
 */


// CStack characteristic methods
/*	Method aaa.Reverzuj
 *	author Kluka
 */
CStack CStack::Reverzuj()
	{
	if (iCount == 0 || iTop == nullptr)
		return *this;

	CBlock* iHead = iTop;
	CBlock* iPrev = NULL, * iNext = NULL;
	while (iHead != NULL)
		{
		iNext = static_cast<CBlock*>(iHead->NextItem());
		iHead->SetNextItem(iPrev);
		iPrev = iHead;
		iHead = iNext;
		}

	iHead = iPrev;
	return *this;
	}

/*	Function Reverzuj(aaa)
 *	author Prasek
 */
CStack Reverzuj(CStack aValue)
	{
	CStack result = aValue;
	return result.Reverzuj();
	}

/*	Stack Push
 *	authors Pesek, Prasek
 */
CStack& CStack::Push(const CBlock &aValue)
	{
	CBlock* node = new CBlock(aValue);

	node->SetValue(aValue.Value());
	node->SetNextItem(nullptr);
	node->SetPrevItem(this->iTop);

	this->iTop = node;

	node->SetPrevItem(nullptr);
	//delete(node);
	++iCount; //thank me later - Dano

	return *this;
	}

/*	Stack Pop
 *	authors Prasek, Pesek
 */
CStack& CStack::Pop()
	{
	CBlock* temp = iTop;
	iTop = static_cast<CBlock*>(iTop->NextItem());

	delete(temp);

	--iCount; //thank me later - Dano - diky, S.
	return *this;
	}

/*	Stack Top
 *	authors Prasek, Pesek
 */
CStack CStack::Top() const
	{
	return *iTop;
	}

/*	Stack Bottom
 *	author Majnus
 */
CStack CStack::Bottom() const
{
	return *iBottom;
	}

/*	Stack Search
 *	authors Prasek, Pesek
 */
bool CStack::Search(const CBlock &aValue) const
	{
	const CBlock *iCurrent = iTop;

	while(iCurrent != NULL)
		{
		if(iCurrent == aValue.NextItem())
			return true;

		iCurrent = static_cast<CBlock *>(iTop->NextItem());
		}

	return false;
	}
	
/*	Stack Dup
 *	authors Pesek, Prasek
 */
CStack CStack::Dup(CStack* aStack)
	{
	CStack iStack(*this);
	aStack = &iStack;
	return *this; // dodelal jsem return, prosim zkontrolovat, idk jestli je to dobre - S. -> vyskúšajte v main.cpp - Dano
	}