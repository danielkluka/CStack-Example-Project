#ifndef CBLOCK_TWEEKDAY_H
#define CBLOCK_TWEEKDAY_H
/** \file CBlock_TWeekDay.h
 *  \brief CBlock_TWeekDay class header
 *  \details File contain CBlock_TWeekDay::CBlock definition.
 *  \warning Don't modify this file
 *  \authors Petyovsky, Richter
 *  \version 2022
 *  $Id$
 */

#include <iostream>
#include <sstream>
#include <string>
#include <stdexcept>
#include <typeinfo>
#include <utility>		// Due to: std::declval<CBlockBase>

#include "ClassInfo.h"
#include "CBlockBase.h"
#include "check.h"

/** \brief Namespace for encapsulating of \c TWeekDay variant of CBlock class
 *  \details For selecting this variant of CBlock class uncomment \c using \c namespace section in the CBlock.h
 */
namespace CBlock_TWeekDay
	{
	/** \brief Basic definition of enumeration type for representing day of week.
	 */
	enum class TWeekDay
		{
		EMonday = 0, ETuesday, EWednesday, EThursday, EFriday, ESaturday, ESunday
		};

	/** \brief Constant defining numbers of day in the week
	 */
	constexpr size_t KTWeekDaysCount = 7;

	// Definition of support functions a global operators for type enum class TWeekDay

	/** \brief Conversion and range checking function. Convert \c unsigned value to the TWeekDay
	 *  \param[in]	aDayNum	Number of day
	 *  \return Return TWeekDay value
	 *  \authors Petyovsky, Richter
	 *  \attention Method generate \c std::range_error exception if argument \a aDayNum is out of numbers of the day
	 */
	TWeekDay CheckRangeWithException(size_t aDayNum);

	/** \brief Conversion Day number to the Day name
	 *  \param[in]	aWeekDay	Day enumeration
	 *  \return Return Day name
	 *  \authors Petyovsky, Richter
	 */
	const char* TWeekStringName(TWeekDay aWeekDay);

	/** \brief Output to the stream operator. (\em serialization)
	 *  \param[in]	aOStream	Output stream
	 *  \param[in]	aWeekDay	Serialized instantion of TWeekDay
	 *  \return Return \c std::ostream with serialized aWeekDay
	 *  \authors Petyovsky, Richter
	 */
	std::ostream& operator<<(std::ostream& aOStream, const TWeekDay& aWeekDay);

	/** \brief Input from the stream operator. (\em deserialization)
	 *  \param[in]	aIStream	Input stream
	 *  \param[out]	aWeekDay	Place for deserialized instantion of TWeekDay
	 *  \return Return rest of \c std::istream
	 *  \authors Petyovsky, Richter
	 *  \attention Method generate \c std::range_error exception if stream doesn't contains correct name of the day
	 *  \attention Method generate \c std::runtime_error exception if stream isn't in good state
	 */
	std::istream& operator>>(std::istream& aIStream, TWeekDay& aWeekDay);


	/** \brief CBlock class (\c TWeekDay variant)
	 *  \details Definition of CBlock class (\c TWeekDay variant). There is defined all common methods and attributes.
	 */
	class CBlock: public CBlockBase
		{
		ClassInfo<CBlock> iInstanceInfo;	///< Instance of the class info for usage statistics
		TWeekDay iValue;	///< Encapsulated \c enum \c class TWeekDay value

	public:
		// c'tors:
		/** \brief Default c'tor
		 *  \details Value attributes is set to \c EMonday. Pointer attributes are initialised to the \c this value (CBlockBase definition).
		 *  \authors Petyovsky, Richter
		 */
		CBlock(): CBlockBase(), iValue(CheckRangeWithException(static_cast<size_t>(TWeekDay::EMonday)))
			{
			}

		/** \brief Conversion c'tor
		 *  \details Pointer attributes are initialised by given values or by default to the \c this value (CBlockBase definition).
		 *  \param[in]	aValue	New TWeekDay value
		 *  \param[in]	aPrev	Connection with previous node (when needed)
		 *  \param[in]	aNext	Connection with next node (when needed)
		 *  \param[in]	aExtraInt	Special value used for some container types
		 *  \authors Petyovsky, Richter
		 *  \attention Method generate \c std::range_error exception if parameters \p aValue is out of the \c enum \c class TWeekDay range.
		 */
		explicit CBlock(const TWeekDay aValue, CBlock* aPrev = nullptr, CBlock *aNext = nullptr, int aExtraInt = 0): CBlockBase(aPrev, aNext, aExtraInt), iValue(CheckRangeWithException(static_cast<size_t>(aValue)))
			{
			}

		/** \brief Copy c'tor
		 *  \details Create new instance by copying only \p iValue parameter. Pointer attributes are initialised to the \c this value (CBlockBase definition).
		 *  \param[in]	aValue	Original instance for copying
		 *  \authors Petyovsky, Richter
		 */
		CBlock(const CBlock& aValue): CBlockBase(), iValue(aValue.Value())
			{
			}

		/** \brief Conversion c'tor from plain C string (striped string)
		 *  \details Create new instance from Value in the string. Pointer attributes are initialised by given values or by default to the \c this value (CBlockBase definition).
		 *  \param[in]	aStr	Plain C string with string value convertable to the TWeekDay value
		 *  \param[in]	aPrev	Connection with previous node (when needed)
		 *  \param[in]	aNext	Connection with next node (when needed)
		 *  \param[in]	aExtraInt	Special value used for some container types
		 *  \authors Petyovsky, Richter
		 */
		explicit CBlock(const char* aStr, CBlock* aPrev = nullptr, CBlock* aNext = nullptr, int aExtraInt = 0): CBlockBase(aPrev, aNext, aExtraInt), iValue(TWeekDay::EMonday)
			{
			std::istringstream iss(aStr, std::istringstream::in);
			iss >> *this;
			}

		/** \brief Conversion c'tor from std::string 
		 *  \details Create new instance from Value in the string. Pointer attributes are initialised by given values or by default to the \c this value (CBlockBase definition).
		 *  \param[in]	aString	std::string with string value convertable to the TWeekDay value
		 *  \param[in]	aPrev	Connection with previous node (when needed)
		 *  \param[in]	aNext	Connection with next node (when needed)
		 *  \param[in]	aExtraInt	Special value used for some container types
		 *  \authors Petyovsky, Richter
		 */
		explicit CBlock(const std::string& aString, CBlock* aPrev = nullptr, CBlock* aNext = nullptr, int aExtraInt = 0): CBlock(aString.c_str(), aPrev, aNext, aExtraInt)
			{
			}

		// d'tor:
		/** \brief Virtual d'tor
		 *  \authors Petyovsky, Richter
		 */
		virtual ~CBlock() noexcept( noexcept(std::declval<CBlockBase>().~CBlockBase()) )	// noexcept(KCBlockDtorNoException)
			{
			iValue = TWeekDay::EMonday;
			}

		// InstanceInfo getter:
		/** \brief ID getter
		 *  \return Unique instance ID
		 *  \author Petyovsky
		 */
		size_t ID() const
			{
			return iInstanceInfo.ID();
			}

		// setters/getters:
		/** \brief Value setter
		 *  \param[in]	aValue	New Value
		 *  \author Petyovsky
		 *  \attention Method generate \c std::range_error exception if parameters \p aValue is out of the \c enum \c class TWeekDay range.
		 */
		void SetValue(const TWeekDay aValue)
			{
			iValue = CheckRangeWithException(static_cast<size_t>(aValue));
			}

		/** \brief Value getter
		 *  \return Actual \c bool \p Value
		 *  \author Petyovsky
		 */
		TWeekDay Value() const
			{
			return iValue;
			}

		// operators:
		/** \brief Complement operator
		 *  \return CBlock instance with complemented attribute Value.
		 *  \author Petyovsky
		 */
		CBlock operator-() const
			{
			size_t val = static_cast<size_t>(TWeekDay::ESunday) - static_cast<size_t>(Value());
			return CBlock(TWeekDay(val));
			}

		/** \brief Assigment operator
		 *  \return CBlock instance with copied attribute Value.
		 *  \author Petyovsky
		 */
		CBlock& operator=(const CBlock& aValue)
			{
			SetValue(aValue.Value());
			return *this;
			}

		/** \brief Comparing by Value operator
		 *  \return Return \c bool result of comparation
		 *  \author Petyovsky
		 */
		bool operator==(const CBlock& aValue) const
			{
			return iValue == aValue.Value();
			}

#ifdef CBLOCK_THREE_WAY_COMPARISON
		/** \brief Threeway comparison by Value operator
		 *  \return Return \c std::strong_ordering result of comparation
		 *  \author Petyovsky
		 */
		std::strong_ordering operator<=>(const CBlock& aValue) const
			{
			return iValue <=> aValue.Value();
			}
#else
		/** \brief Comparing by Value operator
		 *  \return Return \c bool result of comparation
		 *  \author Petyovsky
		 */
		bool operator!=(const CBlock& aValue) const
			{
			return (iValue != aValue.Value());
			}

		/** \brief Comparing by Value operator
		 *  \return Return \c bool result of comparation
		 *  \author Petyovsky
		 */
		bool operator<(const CBlock& aValue) const
			{
			return (iValue < aValue.Value());
			}

		/** \brief Comparing by Value operator
		 *  \return Return \c bool result of comparation
		 *  \author Petyovsky
		 */
		bool operator>(const CBlock& aValue) const
			{
			return (iValue > aValue.Value());
			}
#endif /* CBLOCK_THREE_WAY_COMPARISON */

		/** \brief Output to the stream operator. (\em serialization)
		 *  \param[in]	aOStream	Output stream
		 *  \param[in]	aValue	Serialized instantion of CBlock
		 *  \return Return \c std::ostream with serialized Value
		 *  \author Petyovsky
		 */
		friend std::ostream& operator<<(std::ostream& aOStream, const CBlock& aValue)
			{
			aOStream << '(' << aValue.Value() << ')';
			return aOStream;
			}

		/** \brief Input from the stream operator. (\em deserialization)
		 *  \param[in]	aIStream	Input stream
		 *  \param[out]	aValue	Place for deserialized instantion of CBlock
		 *  \return Return rest of \c std::istream
		 *  \author Petyovsky
		 */
		friend std::istream& operator>>(std::istream& aIStream, CBlock& aValue)
			{
			char ch = '\0';
			aIStream >> std::skipws >> ch;
			if(!aIStream.good() || ch != '(')
				throw std::runtime_error("Input stream data integrity error!");

			aIStream >> aValue.iValue;

			aIStream >> std::noskipws >> ch;
			if(!aIStream.good() || ch != ')')
				throw std::runtime_error("Input stream data integrity error!");

			return aIStream;
			}

#ifdef CBLOCK_TEST_API

		// constants for testing CBlock functionalities:
		/** \brief First test value
		 *  \return Return TWeekDay value (EMonday)
		 *  \authors Petyovsky, Richter
		 *  \note Useful for automated testing of CBlock functionality
		 */
		static TWeekDay TestValue0()
			{
			return TWeekDay::EMonday;
			}

		/** \brief First test string value
		 *  \return Return string with TWeekDay value (EMonday)
		 *  \authors Petyovsky, Richter
		 *  \note Useful for automated testing of CBlock functionality
		 */
		static std::string TestStringValue0()
			{
			return std::string("(Monday)");
			}

		/** \brief Second test value
		 *  \return Return TWeekDay value (ETuesday)
		 *  \authors Petyovsky, Richter
		 *  \note Useful for automated testing of CBlock functionality
		 */
		static TWeekDay TestValue1()
			{
			return TWeekDay::ETuesday;
			}

		/** \brief Second test string value
		 *  \return Return string with TWeekDay value (ETuesday)
		 *  \authors Petyovsky, Richter
		 *  \note Useful for automated testing of CBlock functionality
		 */
		static std::string TestStringValue1()
			{
			return std::string("(Tuesday)");
			}

		/** \brief Random test value
		 *  \return Return random TWeekDay value
		 *  \authors Petyovsky, Richter
		 *  \note Useful for automated testing of CBlock functionality
		 */
		static TWeekDay TestValueRandom()
			{
			return CheckRangeWithException(std::rand() % KTWeekDaysCount);
			}

		/** \brief Random test string value
		 *  \return Return string with random TWeekDay value
		 *  \authors Petyovsky, Richter
		 *  \note Useful for automated testing of CBlock functionality
		 */
		static std::string TestStringValueRandom()
			{
			return '(' + std::string(TWeekStringName(TestValueRandom())) + ')';
			}

#endif /* CBLOCK_TEST_VALUES */

		}; /* class CBlock */
	} /* namespace CBlock_TWeekDay */
#endif /* CBLOCK_TWEEKDAY_H */
